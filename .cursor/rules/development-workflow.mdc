# Development Workflow and Best Practices

## Environment Setup
- Use `.env.local` for local development (see [env.example](mdc:env.example))
- Never commit sensitive environment variables
- Use proper naming conventions (UPPER_CASE)
- Document required environment variables

## Dependencies
Reference [package.json](mdc:package.json) for current dependencies:
- Keep dependencies up to date
- Use exact versions for critical dependencies
- Document any peer dependencies
- Avoid unnecessary dependencies

## Code Quality
- Use ESLint for code linting (see [eslint.config.mjs](mdc:eslint.config.mjs))
- Follow TypeScript strict mode (see [tsconfig.json](mdc:tsconfig.json))
- Use Prettier for code formatting
- Write meaningful commit messages

## Git Workflow
- Use conventional commit messages
- Create feature branches for new development
- Write descriptive PR descriptions
- Keep commits atomic and focused

## Testing
- Write unit tests for utility functions
- Test component behavior and user interactions
- Mock external dependencies appropriately
- Use proper test data and fixtures

## Performance
- Use Next.js Image component for optimized images
- Implement proper loading states
- Use dynamic imports for code splitting
- Optimize bundle size with proper tree shaking

## Security
- Never expose API keys in client-side code
- Use proper authentication flows with Firebase
- Implement proper CORS policies
- Validate user input on both client and server

## Documentation
- Write clear component documentation
- Document complex business logic
- Keep [README.md](mdc:README.md) up to date
- Document API endpoints

## Deployment
- Use Vercel for deployment
- Configure proper environment variables
- Set up proper redirects and rewrites
- Monitor performance and errors

## Browser Support
- Support modern browsers (Chrome, Firefox, Safari, Edge)
- Use progressive enhancement
- Test responsive design across devices
- Ensure cross-browser compatibility

## Error Handling
- Implement proper error boundaries
- Use try-catch blocks for async operations
- Provide meaningful error messages
- Log errors appropriately
description:
globs:
alwaysApply: false
---
